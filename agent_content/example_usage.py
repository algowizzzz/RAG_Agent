#!/usr/bin/env python3
"""
Agent Content Package - Usage Examples
======================================

This script demonstrates how to use the agent_content package for various
document analysis tasks using the integrated discovery and synthesis tool.

Features:
- Runs comprehensive document analysis examples
- Generates markdown reports with all results
- Supports custom JSON input files
- Demonstrates the correct LangChain flow

Usage:
    python example_usage.py                           # Use default JSON file
    python example_usage.py /path/to/custom/data.json # Use custom JSON file

Output:
- Console output with real-time results
- Markdown report saved to output_reports/ directory
- Comprehensive analysis with timing and metadata
"""

import json
import os
from datetime import datetime
from pathlib import Path
from integrated_discovery_synthesis_tool import create_integrated_discovery_synthesis_tool

def setup_environment():
    """Set up environment variables if needed."""
    # Ensure Gemini API key is set
    if not os.getenv('GEMINI_API_KEY'):
        print("⚠️  Warning: GEMINI_API_KEY not found in environment")
        print("   Please set it with: export GEMINI_API_KEY='your_key_here'")
        return False
    return True

def save_results_to_markdown(results, json_file="../Fetch_data/unified_results.json", output_dir="output_reports"):
    """Save all example results to a comprehensive markdown report."""
    
    # Create output directory if it doesn't exist
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # Generate timestamp for unique filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"Agent_Content_Analysis_Report_{timestamp}.md"
    filepath = output_path / filename
    
    # Prepare markdown content
    markdown_content = f"""# Agent Content Package - Analysis Report

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}  
**Input Data:** {json_file}  
**Tool:** Integrated Discovery and Synthesis Tool  

## Overview

This report contains comprehensive analysis results from the Agent Content Package, demonstrating the correct flow:

```
User Query + JSONSearchTool (discovery and metadata) → JSONSearchTool (operations) → RefineSynthesisTool → Response
```

---

"""
    
    # Add results from each example
    example_titles = [
        ("Data Discovery and Overview", "🔍 Dataset Overview"),
        ("CAR Document Summary", "📄 Capital Adequacy Requirements Summary"), 
        ("Financial Data Query", "💰 Financial Data Analysis"),
        ("Regulatory Framework Analysis", "⚖️ Regulatory Framework Analysis")
    ]
    
    for i, (title, header) in enumerate(example_titles):
        if i < len(results) and results[i] is not None:
            markdown_content += f"""## {header}

**Analysis Type:** {title}  
**Status:** ✅ Successful  

### Results

{results[i]}

---

"""
        else:
            markdown_content += f"""## {header}

**Analysis Type:** {title}  
**Status:** ❌ Failed or No Results  

### Results

Analysis could not be completed for this example.

---

"""
    
    # Add footer
    successful_count = len([r for r in results if r is not None])
    markdown_content += f"""## Summary

- **Total Examples:** {len(example_titles)}
- **Successful:** {successful_count}
- **Failed:** {len(example_titles) - successful_count}

## Technical Details

- **Package:** Agent Content v1.0.0
- **LLM:** Gemini 1.5 Pro
- **Processing:** Refine Synthesis with batch processing
- **Data Source:** Unified JSON results from processed documents

---

*Generated by Agent Content Package Example Usage Script*
"""
    
    # Write to file
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        print(f"\n📄 Markdown report saved: {filepath}")
        print(f"📝 Report contains {len(markdown_content)} characters")
        return str(filepath)
        
    except Exception as e:
        print(f"❌ Error saving markdown report: {str(e)}")
        return None

def example_car_document_summary(json_file="../Fetch_data/unified_results.json"):
    """Example: Generate a comprehensive summary of the CAR document."""
    print("\n📄 Example 1: CAR Document Summary")
    print("=" * 50)
    
    tool = create_integrated_discovery_synthesis_tool(json_file)
    
    result = tool._run(
        user_query="Provide a comprehensive summary of the capital adequacy requirements document, covering key regulatory frameworks, capital ratios, and compliance requirements",
        include_reasoning=True,
        max_results=40
    )
    
    result_data = json.loads(result)
    
    if result_data['status'] == 'SUCCESS':
        print(f"✅ Success! Generated comprehensive CAR summary")
        print(f"📊 Processing: {result_data['processing_summary']['total_processing_time_seconds']:.1f}s, {result_data['processing_summary']['total_chunks_processed']} chunks")
        print(f"📝 Response: {len(result_data['ai_response'])} characters")
        print(f"🔍 Operations: {len(result_data['processing_summary']['operations_executed'])} operations executed")
        
        # Show operations that were determined
        ops = result_data['processing_summary']['operations_executed']
        print(f"\nOperations determined from query analysis:")
        for i, op in enumerate(ops, 1):
            print(f"  {i}. {op.get('operation', 'unknown')} - {op.get('justification', 'No justification')}")
            
        return result_data['ai_response']
    else:
        print(f"❌ Error: {result_data.get('error_message', 'Unknown error')}")
        return None

def example_financial_data_query(json_file="../Fetch_data/unified_results.json"):
    """Example: Query financial data from Excel files."""
    print("\n💰 Example 2: Financial Data Query")
    print("=" * 50)
    
    tool = create_integrated_discovery_synthesis_tool(json_file)
    
    result = tool._run(
        user_query="What financial information is available in the TechTrend spreadsheet? Show me the key financial metrics and data structure.",
        include_reasoning=False,
        max_results=20
    )
    
    result_data = json.loads(result)
    
    if result_data['status'] == 'SUCCESS':
        print(f"✅ Success! Retrieved financial data information")
        print(f"📊 Processing: {result_data['processing_summary']['total_processing_time_seconds']:.1f}s")
        print(f"📝 Response preview: {result_data['ai_response'][:200]}...")
        return result_data['ai_response']
    else:
        print(f"❌ Error: {result_data.get('error_message', 'Unknown error')}")
        return None

def example_regulatory_analysis(json_file="../Fetch_data/unified_results.json"):
    """Example: Comprehensive regulatory framework analysis."""
    print("\n⚖️  Example 3: Regulatory Framework Analysis")
    print("=" * 50)
    
    tool = create_integrated_discovery_synthesis_tool(json_file)
    
    result = tool._run(
        user_query="Analyze the regulatory frameworks and compliance requirements discussed across all available documents. What are the key regulatory standards and requirements?",
        include_reasoning=True,
        max_results=35
    )
    
    result_data = json.loads(result)
    
    if result_data['status'] == 'SUCCESS':
        print(f"✅ Success! Completed regulatory analysis")
        print(f"📊 Processing: {result_data['processing_summary']['total_processing_time_seconds']:.1f}s")
        
        # Show the correct flow execution
        flow = result_data.get('correct_flow_executed', {})
        print(f"\nCorrect Flow Executed:")
        for step, desc in flow.items():
            print(f"  {step}: {desc}")
            
        return result_data['ai_response']
    else:
        print(f"❌ Error: {result_data.get('error_message', 'Unknown error')}")
        return None

def example_discovery_and_overview(json_file="../Fetch_data/unified_results.json"):
    """Example: Discover available data and provide overview."""
    print("\n🔍 Example 4: Data Discovery and Overview")
    print("=" * 50)
    
    tool = create_integrated_discovery_synthesis_tool(json_file)
    
    result = tool._run(
        user_query="What documents and data sources are available? Provide an overview of the content types and what information each contains.",
        include_reasoning=True,
        max_results=15
    )
    
    result_data = json.loads(result)
    
    if result_data['status'] == 'SUCCESS':
        print(f"✅ Success! Generated data overview")
        print(f"📊 Processing: {result_data['processing_summary']['total_processing_time_seconds']:.1f}s")
        
        # Show discovery details if available
        if 'detailed_reasoning' in result_data:
            discovery = result_data['detailed_reasoning'].get('discovery_and_metadata_results', {})
            if 'discovery_results' in discovery:
                files = discovery['discovery_results'].get('summary', {}).get('files', [])
                print(f"📁 Files discovered: {files}")
        
        return result_data['ai_response']
    else:
        print(f"❌ Error: {result_data.get('error_message', 'Unknown error')}")
        return None

def main():
    """Main function to run all examples."""
    import sys
    
    # Check for custom JSON file argument
    json_file = "../Fetch_data/unified_results.json"  # Default
    if len(sys.argv) > 1:
        json_file = sys.argv[1]
        print(f"📁 Using custom JSON file: {json_file}")
    else:
        print(f"📁 Using default JSON file: {json_file}")
        print("   (To use a custom file: python example_usage.py /path/to/your/file.json)")
    
    print("\n🚀 Agent Content Package - Usage Examples")
    print("=" * 60)
    print("Demonstrating the correct flow:")
    print("User Query + JSONSearchTool (discovery and metadata) → JSONSearchTool (operations) → RefineSynthesisTool → Response")
    print("=" * 60)
    
    if not setup_environment():
        return
    
    try:
        # Run examples with the specified JSON file
        examples = [
            lambda: example_discovery_and_overview(json_file),
            lambda: example_car_document_summary(json_file),
            lambda: example_financial_data_query(json_file),
            lambda: example_regulatory_analysis(json_file)
        ]
        
        results = []
        for example_func in examples:
            try:
                result = example_func()
                results.append(result)
            except Exception as e:
                print(f"❌ Example failed: {str(e)}")
                results.append(None)
        
        # Summary
        print("\n🎯 Examples Summary")
        print("=" * 30)
        successful = len([r for r in results if r is not None])
        print(f"✅ Successful examples: {successful}/{len(examples)}")
        
        # Save results to markdown
        if any(results):
            print("\n📄 Saving results to markdown report...")
            markdown_file = save_results_to_markdown(results, json_file)
            if markdown_file:
                print(f"✅ Comprehensive analysis report saved to: {markdown_file}")
        
        if successful > 0:
            print("\n🎉 Agent Content Package is working correctly!")
            print("You can now use it in your LangChain workflows.")
            print("\nQuick usage:")
            print("```python")
            print("from agent_content import create_integrated_discovery_synthesis_tool")
            print("tool = create_integrated_discovery_synthesis_tool()")
            print("result = tool._run(user_query='Your question here')")
            print("```")
        
    except Exception as e:
        print(f"❌ Error running examples: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()